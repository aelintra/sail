<VirtualHost *:80>
   ServerName sark.local

	RewriteEngine On

    RewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)
    RewriteRule .* - [F]

# redirect non-provisioning requests to SSL

#   RewriteRule ^\/$ https://%{HTTP_HOST} [R=301,L] 
     
    RewriteCond %{REQUEST_URI} /main.php 
    RewriteRule ^(.*) https://%{HTTP_HOST}$1 [R=301,L]


# 	SARK Access rules

    Include /etc/apache2/sark_includes/preventIpAccess.conf    

# Rewrites for the provisioning server

# Polycom firmware and licenses
    RewriteRule /provisioning/(.*sip\.ld) http://%{HTTP_HOST}/public/polycom/$1
    RewriteRule /provisioning/bootrom\.ld http://%{HTTP_HOST}/public/polycom/bootrom.ld
    RewriteRule /provisioning/000000000000-license\.cfg http://%{HTTP_HOST}/public/polycom/000000000000-license.cfg
    RewriteRule /provisioning/(SoundPointIPLocalization.*) http://%{HTTP_HOST}/public/polycom/$1

    RewriteRule /provisioning/(42.*) http://%{HTTP_HOST}/public/$1
    RewriteRule /provisioning/(sifs.*) http://%{HTTP_HOST}/public/$1
    RewriteRule ^Config(.*)\.cfg provisioning?mac=$1 [L]
# Aastra firmware
    RewriteRule /provisioning/(.*\.st) http://%{HTTP_HOST}/public/aastra/$1

# Directories

 	DocumentRoot /opt/sark/www/
    AddType application/x-httpd-php .php .php3

    Alias /sark-common /opt/sark/www/sark-common
    Alias /provisioning /opt/sark/provisioning/device.php
    Alias /public /opt/sark/public
    AliasMatch ^/(snom.*) /opt/sark/public/snom/$1     

<Directory /opt/sark/www>
    Options None
    Options +Indexes
    Options +Includes
    AllowOverride None
    Require all granted
    DirectoryIndex index.php
</Directory>

<Directory /opt/sark/public>
   Require all granted
   Satisfy any
</Directory>

<Directory /opt/sark/provisioning>
   Require all granted
   Satisfy any
</Directory>     
</VirtualHost>

<IfModule mod_ssl.c>
<VirtualHost _default_:443>

	Include /etc/apache2/sark_includes/sarkServerName.conf
    
#   limit uploads to 5 Meg                                                       

    LimitRequestBody 41943040

    RewriteEngine on
 
    RewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)
    RewriteRule .* - [F]

# 	SARK Access rules

    Include /etc/apache2/sark_includes/preventIpAccess.conf	
    
    # Rewrites for the provisioning server

    RewriteRule /provisioning/(.*sip\.ld) https://%{HTTP_HOST}/public/polycom/$1
    RewriteRule /provisioning/bootrom\.ld https://%{HTTP_HOST}/public/polycom/bootrom.ld
    RewriteRule /provisioning/(42.*) https://%{HTTP_HOST}/public/$1
    RewriteRule /provisioning/(sifs.*) https://%{HTTP_HOST}/public/$1
    RewriteRule ^Config(.*)\.cfg provisioning?mac=$1 [L]
    RewriteRule /provisioning/(SoundPointIPLocalization.*) https://%{HTTP_HOST}/public/polycom/$1


	DocumentRoot /opt/sark/www/
    AddType application/x-httpd-php .php .php3

    ScriptAlias /sark/cgi-bin /opt/sark/www/cgi-bin
    ScriptAlias /sail/cgi-bin /opt/sark/www/cgi-bin
    Alias /sark-common /opt/sark/www/sark-common
    Alias /server-sounds /usr/share/asterisk/sarksounds
    Alias /server-moh /usr/share/asterisk
    Alias /server-vmail /var/spool/asterisk/voicemail
    Alias /provisioning /opt/sark/provisioning/device.php
    Alias /public /opt/sark/public
    Alias /php /opt/sark/php
    Alias /prog /opt/sark/php
    AliasMatch ^/(snom.*) /opt/sark/public/snom/$1     


<Directory /opt/sark/php>

                Options None
                Options -Indexes
                Options +Includes
                AllowOverride None
		Require all granted
</Directory>

<Directory /opt/sark/php>
    AddType application/x-httpd-php .php .php3 .phtml
    AddType application/x-httpd-php-source .phps
    php_admin_value open_basedir /opt/sark/:/usr/share:/etc:/var/lock/subsys:/var/log:/tmp:/var/spool/asterisk:/drbd
</Directory>

<Directory /opt/sark/www>
    Options None
    Options +Indexes
    Options +Includes
    AllowOverride None
    Require all granted
    DirectoryIndex index.php
</Directory>

<Directory /opt/sark/public>
   Require all granted
   Satisfy any
</Directory>

<Directory /opt/sark/provisioning>
   Require all granted
   Satisfy any
</Directory>

<Directory /usr/share/asterisk/sounds>
    Options Indexes MultiViews
    AllowOverride None
    Require all granted
</Directory>

<Directory /var/spool/asterisk/voicemail>
    Options Indexes MultiViews
    AllowOverride None
    Require all granted
</Directory>	
	
	
	ErrorLog ${APACHE_LOG_DIR}/error.log

	# Possible values include: debug, info, notice, warn, error, crit,
	# alert, emerg.
	LogLevel warn

	CustomLog ${APACHE_LOG_DIR}/ssl_access.log combined

	#   SSL Engine Switch:
	#   Enable/Disable SSL for this virtual host.
	SSLEngine on

	#   A self-signed (snakeoil) certificate can be created by installing
	#   the ssl-cert package. See
	#   /usr/share/doc/apache2.2-common/README.Debian.gz for more info.
	#   If both key and certificate are stored in the same file, only the
	#   SSLCertificateFile directive is needed.
	#SSLCertificateFile    /etc/ssl/certs/ssl-cert-snakeoil.pem
	#SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key

	SSLCertificateFile    /etc/apache2/ssl/vhost1.crt
    SSLCertificateKeyFile /etc/apache2/ssl/vhost1.key

	#   Server Certificate Chain:
	#   Point SSLCertificateChainFile at a file containing the
	#   concatenation of PEM encoded CA certificates which form the
	#   certificate chain for the server certificate. Alternatively
	#   the referenced file can be the same as SSLCertificateFile
	#   when the CA certificates are directly appended to the server
	#   certificate for convinience.
	#SSLCertificateChainFile /etc/apache2/ssl.crt/server-ca.crt

	#   Certificate Authority (CA):
	#   Set the CA certificate verification path where to find CA
	#   certificates for client authentication or alternatively one
	#   huge file containing all of them (file must be PEM encoded)
	#   Note: Inside SSLCACertificatePath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCACertificatePath /etc/ssl/certs/
	#SSLCACertificateFile /etc/apache2/ssl.crt/ca-bundle.crt

	#   Certificate Revocation Lists (CRL):
	#   Set the CA revocation path where to find CA CRLs for client
	#   authentication or alternatively one huge file containing all
	#   of them (file must be PEM encoded)
	#   Note: Inside SSLCARevocationPath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCARevocationPath /etc/apache2/ssl.crl/
	#SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl

	#   Client Authentication (Type):
	#   Client certificate verification type and depth.  Types are
	#   none, optional, require and optional_no_ca.  Depth is a
	#   number which specifies how deeply to verify the certificate
	#   issuer chain before deciding the certificate is not valid.
	#SSLVerifyClient require
	#SSLVerifyDepth  10

	#   Access Control:
	#   With SSLRequire you can do per-directory access control based
	#   on arbitrary complex boolean expressions containing server
	#   variable checks and other lookup directives.  The syntax is a
	#   mixture between C and Perl.  See the mod_ssl documentation
	#   for more details.
	#<Location />
	#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
	#            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
	#            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
	#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
	#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
	#           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
	#</Location>

	#   SSL Engine Options:
	#   Set various options for the SSL engine.
	#   o FakeBasicAuth:
	#     Translate the client X.509 into a Basic Authorisation.  This means that
	#     the standard Auth/DBMAuth methods can be used for access control.  The
	#     user name is the `one line' version of the client's X.509 certificate.
	#     Note that no password is obtained from the user. Every entry in the user
	#     file needs this password: `xxj31ZMTZzkVA'.
	#   o ExportCertData:
	#     This exports two additional environment variables: SSL_CLIENT_CERT and
	#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
	#     server (always existing) and the client (only existing when client
	#     authentication is used). This can be used to import the certificates
	#     into CGI scripts.
	#   o StdEnvVars:
	#     This exports the standard SSL/TLS related `SSL_*' environment variables.
	#     Per default this exportation is switched off for performance reasons,
	#     because the extraction step is an expensive operation and is usually
	#     useless for serving static content. So one usually enables the
	#     exportation for CGI and SSI requests only.
	#   o StrictRequire:
	#     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
	#     under a "Satisfy any" situation, i.e. when it applies access is denied
	#     and no other module can change it.
	#   o OptRenegotiate:
	#     This enables optimized SSL connection renegotiation handling when SSL
	#     directives are used in per-directory context.
	#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
	<FilesMatch "\.(cgi|shtml|phtml|php)$">
		SSLOptions +StdEnvVars
	</FilesMatch>
	<Directory /usr/lib/cgi-bin>
		SSLOptions +StdEnvVars
	</Directory>

	BrowserMatch "MSIE [2-6]" \
		nokeepalive ssl-unclean-shutdown \
		downgrade-1.0 force-response-1.0
	# MSIE 7 and newer should be able to use keepalive
	BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown

 <Location /console>
    ProxyPass  http://localhost:63005/
    Order      allow,deny
    Allow      from all
  </Location>


</VirtualHost>
</IfModule>
