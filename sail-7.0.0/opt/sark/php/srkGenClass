<?php
// SARK Helper class
// Developed by CoCo
// Copyright (C) 2012 CoCoSoFt
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

//
// we use the full path here because this class gets called from batch as well as online
//  
require_once "/opt/sark/php/srkNetHelperClass";

Class genAsteriskObjects {

	private $helper;
	private $nethelper;
	private $dbh;
	private $globals;
	private $HINTS;
	private $SOUNDIR = '/usr/share/asterisk/sarksounds/';

	
public function genAsterisk() {
	$this->dbh = DB::getInstance();
	$this->helper = new helper;
	$this->nethelper = new nethelper;

	try {
		$sql = $this->dbh->prepare("select * from globals WHERE pkey = ?"); 
		$sql->execute(array('global'));		
		$this->globals = $sql->fetch();	
		$sql=NULL;
	} catch (PDOException $e) {
			$errorMsg = $e->getMessage();
			return $errorMsg;
	}		

// ask the helper to run a regen for us.
    $this->helper->logit(" commit - starting commit", 5 );


    $this->genCdr();
    $this->genExtensions();
    $this->genMoh();
    $this->genParks();
    $this->genIax();
    $this->genSip();
    $this->genQueues();
    $this->genFeatures();
    $this->genVmail();
    $this->moveDb();

    $dbh = NULL;

	
	if ($this->globals['RUNFOP'] == 'enabled') {
		$rc = $this->request_syscmd ("perl /opt/sark/scripts/op_buttons.pl >/dev/null 2>&1");
		$rc = $this->request_syscmd ("perl /opt/sark/scripts/name_op_buttons.pl >/dev/null 2>&1");	
	}

	$this->helper->logit(" commit - ended", 5 );
// run FOP gen if enabled


/*
 * take a snapshot
 */ 
	$rc = $this->helper->request_syscmd ("/bin/sh /opt/sark/scripts/snap.sh");

/*
 * reload asterisk
 */
	$rc = $this->helper->request_syscmd ("sudo /usr/sbin/asterisk -rx 'reload'");
	
	return;
}

private function genCdr() {
    $fh = fopen("/etc/asterisk/cdr_mysql.conf", 'w') or die('Could not open file cdr_mysql.conf!');
// write the Master file
//    include("generated_file_banner.php");        
    $OUT = $this->genFileBanner();

    fwrite($fh, $OUT. " \n" . "#include sark_cdr_mysql.conf  \n")
    	or die('Could not write to file cdr_mysql.conf');
    fclose($fh);
}

private function genMoh() {
	$OUT = $this->genFileBanner();
	$res = $this->dbh->query('SELECT pkey from cluster');
	foreach ($res as $row) {
		if (!file_exists("/usr/share/asterisk/moh-" . $row['pkey'])) {
			$rc = $this->helper->request_syscmd ("mkdir /usr/share/asterisk/moh-" . $row['pkey']);
		}
		$OUT .= "[" . $row['pkey'] . "]\n";
		$OUT .= "mode=files\n";
		$OUT .= "directory=moh-" . $row['pkey'] . "\n";
		$OUT .= "sort=random\n\n";
	}
	if (!empty($OUT)) { 
		$fh = fopen("/etc/asterisk/sark_moh.conf", 'w') or die('Could not open file sark_moh.conf!');
		fwrite($fh,$OUT) or die('Could not write to file sark_moh.conf');
		fclose($fh);
	}
}

/*
	Generate individual call parks - this is an Ast 13+ feature
 */
private function genParks() {
	$OUT = NULL;
	$res = $this->dbh->query('SELECT id,pkey from cluster');
	foreach ($res as $row) {
		$OUT .= "[" . $row['pkey'] . "]\n";
		$OUT .= "context=" . $row['pkey'] . "park\n";
		$OUT .= "parkext=700\n";
		$OUT .= "parkpos=701-703\n\n";
	}
	if (!empty($OUT)) { 
		$fh = fopen("/etc/asterisk/sark_res_parking.conf", 'w') or die('Could not open file sark_res_parking.conf!');
		fwrite($fh,$OUT) or die('Could not write to file res_parking.conf');
		fclose($fh);
	}
}

private function genIax() {

	$OUT = NULL;


//	$global = $this->helper->getTable("globals");
//	print_r($global);
	if ($this->globals['BINDADDR'] == "ON") { 
		$OUT .= 'bindaddr=' . $this->globals['HACLUSTERIP'] . "\n";	   
	}

	if (!empty($OUT)) { 
		$fh = fopen("/etc/asterisk/sark_iax_localnet_header.conf", 'w') or die('Could not open file sark_iax_localnet_header.conf!');
		fwrite($fh,$OUT) or die('Could not write to file sark_iax_localnet_header.conf');
		fclose($fh);
	}

//
//	Registrations 	
//
	$OUT = $this->genFileBanner();
	$result = $this->helper->getTable("lineio",null,false);
	 
    foreach ($result as $row) {
        if ($row['register'] != "") {                

			try {
				$sql = $this->dbh->prepare("SELECT * from Carrier where pkey=?");
				$sql->execute(array($row['carrier']));		
				$carrier = $sql->fetch();	
				$sql=NULL;
			} catch (PDOException $e) {
				$errorMsg = $e->getMessage();
				return $errorMsg;
			}

			if ($carrier['technology'] == "IAX2") {
				if ($row['active'] == "YES") {
					$OUT .= 'register => ' . $row['register'] . "\n";
				}
			}
		}
	}	
	if (!empty($OUT)) {   
		$fh = fopen("/etc/asterisk/sark_iax_registrations.conf", 'w') or die('Could not open file sark_iax_registrations.conf!');
		fwrite($fh,$OUT) or die('Could not write to file sark_iax_registrations.conf');
		fclose($fh);
	}	

//
//  IAX peers (Lines)
//					       
	$result = $this->helper->getTable("lineio",null,false);
    foreach ($result as $row) {
		if ($row['active'] == "YES") {
        	try {
				$sql = $this->dbh->prepare("SELECT * from Carrier where pkey=?");
				$sql->execute(array($row['carrier']));		
				$carrier = $sql->fetch();	
				$sql=NULL;
			} catch (PDOException $e) {
				$errorMsg = $e->getMessage();
				return $errorMsg;
			}
            if ($carrier['technology'] == "IAX2"  || $carrier['technology'] == "Gateway") {
            	if ($row['carrier'] == "InterSARK"  || $row['carrier'] == "SailToSail") {
                	if ($row['privileged'] == "NO") {
                        if (!preg_match(" /context=mainmenu/",$row['sipiaxuser'])) {
                            $row['sipiaxuser'] = preg_replace ( '/context=internal/','context=mainmenu', $row['sipiaxuser'] );
                        }
                        else {
                            $row['sipiaxuser'] = preg_replace ( '/\n\s*$/','context=mainmenu', $row['sipiaxuser'] );
                        }
                    }
                }
                $OUT .= "[" . $row['peername'] . "]\n";
                $OUT .= $row['sipiaxpeer'] . "\n";
                if (isset($row['sipiaxuser'])) {
                    $OUT .= "[" . $row['desc'] . "]\n";
                    $OUT .= $row['sipiaxuser'] . "\n\n";;
                }
            }
        }

	}

// write the generated include file 
	$fh = fopen("/etc/asterisk/sark_iax_main.conf", 'w') or die('Could not open file sark_iax_main.conf!');
	fwrite($fh,$OUT) or die('Could not write to file IAXpeers');
	fclose($fh);

	$fh = fopen("/etc/asterisk/iax.conf", 'w') or die('Could not open file sark_iax_main.conf!');
// write the voicemail Master file

    $OUT = $this->genFileBanner();
	fwrite($fh, $OUT. " \n" .
				"#include sark_iax_header.conf  \n" .
				"#include sark_customer_iax_header.conf  \n" .
				"#include sark_iax_localnet_header.conf  \n" .
				"#include sark_iax_registrations.conf  \n" .
				"#include sark_iax_main.conf \n" .
				"#include sark_customer_iax_main.conf  \n") 
		or die('Could not write to file IAXincludes');
	fclose($fh); 
}


private function genSip() {

	$OUT = $this->genFileBanner();

	if ($this->globals['SENDEDOMAIN'] = "YES") {
		if ($this->globals['EDOMAIN'] != "") { 
			$OUT .= 'externip=' . $this->globals['EDOMAIN'] . "\n";	   
		}	
		else {
			$edomaindig = $this->nethelper->get_externip();
			if ($edomaindig) {
            	$OUT .= 'externip=' . $edomaindig . "\n";
            }
		}
	}
	if ($this->globals['BINDADDR'] == "ON") {
		if ($this->globals['HACLUSTERIP']) {
			$OUT .= 'bindaddr=' . $this->globals['HACLUSTERIP'] . "\n";
		}	   
	}
	
//  deal with TLS
	$tlsport = 'tlsbindaddr=0.0.0.0';
	if (isset($this->globals['TLSPORT'])) {
		if ($this->globals['TLSPORT'] != '5061') {
			$tlsport .= ':' . $this->globals['TLSPORT'];
		}
	}
	`/bin/echo $tlsport > /etc/asterisk/sark_sip_tlsbindaddr.conf`;
	

	if (file_exists( '/etc/asterisk/sark_sip_localnet.conf' )) {
		$OUT .= "#include sark_sip_localnet.conf \n";
	}
	
	$fh = fopen("/etc/asterisk/sark_sip_localnet_header.conf", 'w') or die('Could not open file sark_sip_localnet_header.conf!');
	fwrite($fh,$OUT) or die('Could not write to file sark_sip_localnet_header.conf');
	fclose($fh);

	$OUT = $this->genFileBanner();

	$result = $this->helper->getTable("lineio",null,false);

    foreach ($result as $row) {    
        if (!empty($row['register'])) {
			try {
				$sql = $this->dbh->prepare("SELECT * from Carrier where pkey=?");
				$sql->execute(array($row['carrier']));		
				$carrier = $sql->fetch();	
				$sql=NULL;
			} catch (PDOException $e) {
				$errorMsg = $e->getMessage();
				return $errorMsg;
			}

			if ($carrier['technology'] == "SIP") {
				if ($row['active'] == "YES") {
					$OUT .= 'register => ' . $row['register'] . "\n";
				}
			}
		}
	}

	$fh = fopen("/etc/asterisk/sark_sip_registrations.conf", 'w') or die('Could not open file sark_sip_registrations.conf!');
	fwrite($fh,$OUT) or die('Could not write to file sark_sip_registrations.conf');
	fclose($fh);	
//
//  SIP extensions (phones)
//
	$OUT = $this->genFileBanner();	 
	$result = $this->helper->getTable("ipphone",null,false);

    foreach ($result as $row) {
		if ($row['active'] == "YES") {       
			if ($row['technology'] == "SIP") {
				$OUT .= "[" . $row['pkey'] . "]\n";
				if ($row['cluster'] == "default") {
					$myContext = "qrxvtmny";
				}	 
				else {
					$myContext = $row['cluster'];
				}
//				$OUT .= "context=" . $myContext . "COS\n";		
				$row['sipiaxfriend'] = preg_replace ( '/context=internal/', "context=" . $myContext . "COS", $row['sipiaxfriend']);		
				$row['sipiaxfriend'] = preg_replace ( '/\$desc/', $row['desc'], $row['sipiaxfriend']);
				$row['sipiaxfriend'] = preg_replace ( '/\$password/', $row['passwd'], $row['sipiaxfriend']);
				$row['sipiaxfriend'] = preg_replace ( '/\$ext/', $this->helper->displayKey($row['pkey']), $row['sipiaxfriend']);
//				$row['sipiaxfriend'] = preg_replace ( '/\$ext/', $row['pkey'], $row['sipiaxfriend']);
				$row['sipiaxfriend'] = preg_replace ( '/\$clst/', $row['cluster'], $row['sipiaxfriend']);
				$row['sipiaxfriend'] = preg_replace ( '/\$subtxt/', $myContext, $row['sipiaxfriend']);
				$nat='no';
				if ($row['location'] == 'remote') {
					$nat='yes';
				}
				$row['sipiaxfriend'] = preg_replace ( '/\$nat/', $nat, $row['sipiaxfriend']);
				$row['sipiaxfriend'] = preg_replace ( '/\$transport/', $row['transport'], $row['sipiaxfriend']);
				$encryption='no';
				if ($row['transport'] == 'tls') {
					$encryption='yes';
				}
				$row['sipiaxfriend'] = preg_replace ( '/\$encryption/', $encryption, $row['sipiaxfriend']);				
				$OUT .= $row['sipiaxfriend'] . "\n\n";
			} 
		}
	}
//
//  SIP peers (Lines)
//

	$result = $this->helper->getTable("lineio",null,false);

    foreach ($result as $row) {             
    	if ($row['active'] == "YES") {    
			try {
				$sql = $this->dbh->prepare("SELECT * from Carrier where pkey=?");
				$sql->execute(array($row['carrier']));		
				$carrier = $sql->fetch();	
				$sql=NULL;
			} catch (PDOException $e) {
				$errorMsg = $e->getMessage();
				return $errorMsg;
			}

//			$carrier = $dbh->query($cquery)->fetch();
			if ($carrier['technology'] == "SIP"  || $carrier['technology'] == "Gateway") {
				if ($row['privileged'] == "NO") {
					if (!preg_match(" /context=mainmenu/",$row['sipiaxuser'])) { 
						$row['sipiaxuser'] = preg_replace ( '/context=internal/','/context=mainmenu/', $row['sipiaxuser'] );
					}
					else {
						$row['sipiaxuser'] = preg_replace ( '/\n\s*$/','/context=mainmenu/', $row['sipiaxuser'] );
					}
				}	 	
				$OUT .= "\n[" . $row['peername'] . "]\n";
				$OUT .= $row['sipiaxpeer'] . "\n";
				if (isset($row['sipiaxuser'])) {
					if (trim($row['sipiaxuser'])) {
						$OUT .= "[" . $row['desc'] . "]\n";
						$OUT .= $row['sipiaxuser'] . "\n";
					}
				}
			}	
		}
	}

	 
// write the generated include file 
	$fh = fopen("/etc/asterisk/sark_sip_main.conf", 'w') or die('Could not open file sark_sip_main.conf!');
	fwrite($fh,$OUT) or die('Could not write to file sark_sip_main.conf');
	fclose($fh); 

	$fh = fopen("/etc/asterisk/sip.conf", 'w') or die('Could not open file!');
// write the sip.conf file
    $OUT = $this->genFileBanner();        
	fwrite($fh, $OUT. " \n" .
				"#include sark_sip_header.conf  \n" .
				"#include sark_customer_sip_header.conf  \n" .
				"#include sark_sip_localnet_header.conf  \n" .
				"#include sark_sip_registrations.conf  \n" .
				"#include sark_sip_main.conf \n" .
				"#include sark_customer_sip_main.conf  \n") 
		or die('Could not write to file SIPincludes');
	fclose($fh);
// clean up any DOS type stuff from the generated file 
	`dos2unix /etc/asterisk/sark_sip_main.conf >/dev/null 2>&1`;
}


private function genQueues() {


	$OUT = $this->genFileBanner();
	$result = $this->helper->getTable("queue",null,false);

    foreach ($result as $row) {
        $OUT .= '[' . $row['pkey'] . "] \n"; 
		$OUT .= $row['conf'];
		$OUT .= "\n";          
	}
	
	$OUT .= ";Special Queues(if any)\n";  
        
     
//	$row = $dbh->query("select CAMPONQONOFF from globals")->fetch();    

	if ( $this->globals['CAMPONQONOFF'] == 'ON' ) {
		foreach ($dbh->query("select * from IPphone") as $row) {
			$OUT .= '[Q' . $row['pkey'] . "] \n"; 
			$OUT .= 'member=>SIP/' . $row['pkey'] . "\n";
		    $OUT .=	"musiconhold=default\n";
			$OUT .= "strategy=ringall\n";
			$OUT .= "timeout=300\n";
			$OUT .= "retry=5\n";
			$OUT .= "wrapuptime=0\n";
			$OUT .= "maxlen=0\n";
			$OUT .= "announce-frequency=30\n";
			$OUT .= "announce-holdtime=yes\n\n";
		}
	}
	 
// write the generated include file 
	$fh = fopen("/etc/asterisk/sark_queues_main.conf", 'w') or die('Could not open file sark_queues_main.conf!');
	fwrite($fh,$OUT) or die('Could not write to file sark_queues_main.conf!');
	fclose($fh); 

// write the voicemail Master file
	$fh = fopen("/etc/asterisk/queues.conf", 'w') or die('Could not open file queues.conf!');
    $OUT = $this->genFileBanner();        
	fwrite($fh, $OUT. " \n" .
				"#include sark_queues_header.conf  \n" .
				"#include sark_customer_queues_header.conf  \n" .
				"#include sark_queues_main.conf \n" .
				"#include sark_customer_queues_main.conf  \n") 
		or die('Could not write to file queues.conf');
	fclose($fh); 
}



private function genFeatures() {


	$OUT = $this->genFileBanner();
   	
// Ast 13 does parking differently
   	$rlse = file_get_contents("/etc/debian_version");	
   	if(preg_match( '/^9/', $rlse)) {
   		$OUT .= "[general] \n\n\n";
   	}
   	else {
       	$OUT .= "#include sark_features_general.conf  \n";
   	} 
   	$OUT .= "#include sark_features_featuremap.conf  \n";
   	$OUT .= 	"#include sark_features_applicationmap.conf  \n";

   	$fh = fopen("/etc/asterisk/features.conf", 'w') or die('Could not open file features.conf!');
   	fwrite($fh, $OUT. " \n")
   		or die('Could not write to file features.conf ');   	
   	fclose($fh);
}




private function genVmail() {

	$mailbox = array();
	$parts=array();
	$context = '[null]';

// read the existing file to preserve passwords and options

	$file = '/etc/asterisk/voicemail.conf' or die('Could not read file voicemail.conf!');
	if (file_exists($file)) {
    	$rec = file($file) or die('Could not read file voicemail.conf !');
     	foreach ($rec as $line) {
			$line = trim ($line);
/*
Context not currently used but may be in future
 */			
			if (preg_match(" /^(\[.*\])$/ ",$line,$matches)) {
				$context = $matches[1];
			}

			if (!preg_match(" /^;.*/",$line)) {
				$line = preg_replace( '/\s+/', ' ', $line );
				if (preg_match(" /^(\d{3,6})\s*=>\s*((\d*)?),/",$line,$matches)) {			
					$mailbox[$context][$matches[1]]['password'] = substr($matches[2],2);
				}
				$parts = explode('=>',$line);
				if (isset($parts[1])) {	
					$exten = trim($parts[0]);		
					$params = explode(',',$parts[1]);
					if (isset($params[1])) {
						$mailbox[$context][$exten]['name'] = trim($params[1]);
					}
					if (isset($params[2])) {
						$mailbox[$context][$exten]['email'] = trim($params[2]);
					}
					if (isset($params[3])) {
						$mailbox[$context][$exten]['options'] = trim($params[3]);
					}
					if (isset($params[4])) {
						$mailbox[$context][$exten]['options'] .= ',' . trim($params[4]);
					}								
				}				
			}
    	}
	
	}

	$OUT = <<<BANNEREND
;
;               Modifying this file
; This file is generated by the SARK/SAIL Asterisk generator code and
; it will be overwritten each time you issue a COMMIT in the
; SARK/SAIL GUI workbench.  However, it will preserve changes to the voicemail
; passwords provided you use passwords of either three or four digits.  
; You may also supply an options statement at the end of each mailbox stanza.
;
#include sark_vmail_header.conf
#include sark_customer_vmail_header.conf
#include sark_vmail_layout.conf

BANNEREND;
     
    $result = $this->helper->getTable("ipphone",null,false,false,"cluster,pkey");
    $cluster=null;
    foreach ($result as $row) {
    	$shortkey = $this->helper->displayKey($row['pkey']);
    	if ($row['cluster'] != $cluster) {
    		$cluster = $row['cluster'];
    		$OUT .= "[" . $cluster . "]\n";
    	} 
		if ($row['dvrvmail'] != 'None') {
			if (!empty ($mailbox[$row['cluster']][$row['pkey']]['password'])) {
				$pwd = $mailbox[$row['cluster']][$row['pkey']]['password'];
			}
			else {
				$pwd = $this->helper->displayKey($row['pkey']);
			}
			$OUT .= $shortkey . ' => ' . $pwd . ',' . $row['desc'] . ',' .
			$row['vmailfwd'];
			if (isset($mailbox[$row['cluster']][$row['pkey']]['options'])) {
				$OUT .= ',' . $mailbox[$row['cluster']][$row['pkey']]['options'];
			}
			$OUT .= " \n";
        }
    }

	$fh = fopen("/etc/asterisk/voicemail.conf", 'w') or die('Could not open file voicemail.conf!'); 
	fwrite($fh,$OUT) or die('Could not write to file voicemail.conf' );
	fclose($fh); 
}



private function moveDb() {

	`/bin/cp /opt/sark/db/sark.db /opt/sark/db/sark.copy.db`;
	`/bin/mv /opt/sark/db/sark.copy.db /opt/sark/db/sark.rdonly.db`;
	
}




private function genFileBanner() {

	$OUT = <<<BANNEREND
;
;               DO NOT MODIFY THIS FILE
; It is generated by the SARK/SAIL Asterisk generator code and
; it will be overwritten each time you issue a COMMIT in the
; SARK/SAIL GUI workbench.
;

BANNEREND;

return $OUT;

}


//
//******************************* extensions.conf ***********************************
//

private function genExtensions() {

$OUT = $this->genFileBanner();

$release = `sudo /usr/sbin/asterisk -rx 'core show version'`;
$vers = '1.8';
if (preg_match(' /Asterisk\s*(\d\d).*$/ ', $release,$matches)) {
	$vers = $matches[1];
}
//echo 'Asterisk version is ' . $vers . "\n";

$OUT .= "[general] \n";
$OUT .= "static=yes \n";
$OUT .= "writeprotect=yes \n";
$OUT .= "[globals] \n";

$OUT.="\tLOCALIP=" . $this->nethelper->get_localIPV4() ."\n";


try {

//
//	output our main reference globals	
//
	
	$displayglobals = array("ABSTIMEOUT","ALLOWHASHXFER","BLINDBUSY","BOUNCEALERT","CALLRECORD1",
			   "INTRINGDELAY","LANGUAGE","LTERM","OPERATOR","PLAYBEEP","PLAYBUSY","PLAYCONGESTED",
			   "PLAYTRANSFER","RINGDELAY","SYSOP","SYSPASS","SPYPASS","VOIPMAX","VOICEINSTR","MAXIN");



	if (!isset($this->globals['LANGUAGE'])) {
		$this->globals['LANGUAGE'] = 'en-gb';
	}
 	foreach ($displayglobals as $name) {
		$OUT .= "\t" . $name . "=" . $this->globals[$name] . "\n";
 	} 

//
//  globals required for Hot Desk
//	Not currently implemented
//
/*
	if (file_exists("/usr/sbin/aelhdlon")) {

		$OUT .= "\tHDLOGIN=*14*\n";
		$OUT .= "\tHDLOGOUTL=*15*\n";
		$OUT .= "\tHDLOGOUTR=*16*\n";
		$OUT .= "\tHDLOGOUTRS=*17*\n";
		$OUT .= "\tHDSUPPASS=3243\n";
	}
*/

//	
//  globals required for call recording     		/
//
	if (file_exists('/etc/debian_version')) {
       	$OUT .= "\tMONITOR_EXEC=/opt/sark/scripts/selmixd\n";
    }
    else {
		$OUT .= "\tMONITOR_EXEC=/opt/sark/scripts/selmix\n";
	}
	if (file_exists( "/opt/sark/recone" )) {
        	$OUT .= "\tSET_DYNAMIC_FEATURES=>YES\n";
	}
	else {
			$OUT .= "\tSET_DYNAMIC_FEATURES=>NO\n";
        	$OUT .= "\tDYNAMIC_FEATURES=>automon\n";
	}
	$OUT .= "\n"; 
//
//  include any customer supplied globals
//
	if ( file_exists( "/etc/asterisk/sark_customer_extensions_globals.conf" )) {
		$OUT .= ";\tCustomer supplied Globals (include file)\n";
		$OUT .= ";\n";
        	$OUT .= "#include sark_customer_extensions_globals.conf \n";
		$OUT .= ";\n";
	}
	

	$OUT .= "\n[from-internal]\t; Compatibility \n";
	$OUT .= "\tinclude => internal \n\n";



// deprected in 7 - can still be used for downstream trunk agregation
	$OUT .= "[internal] \n";

	$OUT .= "\t" . 'exten => _XX.,1,GoTo(qrxvtmny,${EXTEN},1))' . "\n\n";


	
	$sql = "select * from Cluster order by id";
	$qRes = $this->dbh->query($sql);
	$cluster = $qRes->fetchAll();
	$qRes = NULL;

//
//  Class Of Service and Tenants if they are enabled
//

	if (empty($this->globals['OPERATOR'])) {
		$this->globals['OPERATOR'] = "0";
	}

//
//	extension start contexts
//
	foreach ($cluster as $row) {
		$myCluster = $row['pkey'];
		if ($row['pkey'] == "default") {
			$myCluster = 'qrxvtmny';
		} 

		$OUT .= "[" . $myCluster . "COS]\n";
		$OUT .= "\texten => _.,1,GoToIf(\$[\${LEN(\${CALLERID(num)})} > 6]?$myCluster,\${EXTEN},1)\n";
		$OUT .= "\texten => _.,2,SET(myClusterOclo=\${DB($myCluster/STATE)})\n";
		
//		$OUT .= "\t" . 'exten => _.,n,GoToIf($["${myClusterOclo}" = "CLOSED"]?${CALLERID(num)}closedcos,${EXTEN},1:${CALLERID(num)}opencos,${EXTEN},1)' . "\n\n";
		
		$OUT .= "\t" . 'exten => _.,n,GoToIf($["${myClusterOclo}" = "CLOSED"]?' . 
			$myCluster . '${CALLERID(num)}closedcos,${EXTEN},1:' . 
			$myCluster . '${CALLERID(num)}opencos,${EXTEN},1)' . "\n\n";
	}

//
//	priv_sibling patch
//	
	$OUT .= "[priv_sibling] \n";
	$OUT .= "\tinclude => internal \n";
//
//  Clusters 
//

 	foreach ($cluster as $row) {

		if ($row['pkey'] == "default") {
			$OUT .= "[qrxvtmny]\n"; 
		}
		else {
			$OUT .= "[" . $row['pkey'] . "]\n";
//			$OUT .= "\tinclude => " . $row['pkey'] . "-qaccess\n"; 
		}

		$OUT .= "\tinclude => parkedcalls\n";
		$OUT .= "\tinclude => internal-presets\n";

		$OUT .= <<<WHCLID
;
; 	Withhold CLI for outbound SIP trunks
;   	This will work in most cases if the carrier is a good player
;
;   	It will usually not work for IAX2 trunks and you'll need to figure out 
;	what your carrier requires
;		
        exten => _141XXXXX.,1,NoOp(withhold cli detected)
        exten => _141XXXXX.,n,Set(CALLERID(pres)=prohib)
        exten => _141XXXXX.,n,GoTo(\${EXTEN:3},1)
                 
WHCLID;
		
		$OUT .= "\n";
		$sql = "SELECT * FROM Appl WHERE cluster='" . $row['pkey'] . "' ORDER BY pkey";
		$qRes = $this->dbh->query($sql);
		$appl = $qRes->fetchAll();
		$qRes = NULL;
		foreach ($appl as $applrow) {
			if ($applrow['span'] == "Both" || $applrow['span'] == "Internal") {
				if ($applrow['cluster'] == $row['pkey']) {	
					$OUT .= "\tinclude => " . $applrow['pkey'] . "\n"; 
				}
			}	
 		} 

 		if (!empty($row['localarea']) && !empty($row['localdplan'])) {
			$OUT .= "\texten => " . $row['localdplan'] . ",1,GoTo(" . $row['localarea'] . "\${EXTEN},1)\n";
		}	

		if (!empty($row['operator'])) {
			$OUT .= "\texten => 0,1,GoTo(" . $row['operator'] . ",1)\n";
		}

		if ($row['pkey'] == "default") {
//			Master timers only accessible to the default cluster   
			$OUT .= <<<MASTER
;
;   Visual open/close MASTER throw
;
	exten => MASTER,hint,Custom:MASTER

	exten => MASTER,1,Set(state=\${DB(STAT/OCSTAT)})
	exten => MASTER,n,GoToIf(\$["\${state}" = "AUTO"]?closeup:openup)

	exten => MASTER,n(closeup),Set(DB(STAT/OCSTAT)=CLOSED)
	exten => MASTER,n,Set(DEVICE_STATE(Custom:MASTER)=INUSE)
	exten => MASTER,n,Playback(activated)
	exten => MASTER,n,Hangup

	exten => MASTER,n(openup),Set(DB(STAT/OCSTAT)=AUTO)
	exten => MASTER,n,Set(DEVICE_STATE(Custom:MASTER)=NOT_INUSE)
	exten => MASTER,n,Playback(de-activated)
	exten => MASTER,n,Hangup

	exten => *30*,1,Authenticate(\${SYSPASS})
	exten => *30*,n,GoTo(MASTER,openup)

	exten => *31*,1,Authenticate(\${SYSPASS})
	exten => *31*,n,GoTo(MASTER,closeup)

MASTER;
	}

// Visual open/close LOCAL throw

	$OUT .= <<<LOCAL
;
;   Visual open/close LOCAL throw
;	
LOCAL;

		$OUT .= "\n";
		$OUT .= "\texten => " . $row['pkey'] . ",hint,Custom:" . $row['pkey'] . "\n\n";
		$OUT .= "\texten => " . $row['pkey'] . ",1,Set(state=\${DB(" . $row['pkey'] . "/OCSTAT)})\n";
		$OUT .= "\texten => " . $row['pkey'] . ",n,GoToIf(\$[\"\${state}\" = \"AUTO\"]?" . $row['pkey'] . "close:" . $row['pkey'] . "open)\n";
		$OUT .= "\n";
		$OUT .= "\texten => " . $row['pkey'] . ",n(" . $row['pkey'] . "close),Set(DB(" . $row['pkey'] . "/OCSTAT)=CLOSED)\n";
		$OUT .= "\texten => " . $row['pkey'] . ",n,Set(DEVICE_STATE(Custom:" . $row['pkey'] . ")=INUSE)\n";
		$OUT .= "\texten => " . $row['pkey'] . ",n,Playback(activated)\n";
		$OUT .= "\texten => " . $row['pkey'] . ",n,Hangup\n";
		$OUT .= "\n";
		$OUT .= "\texten => " . $row['pkey'] . ",n(" . $row['pkey'] . "open),Set(DB(" . $row['pkey'] . "/OCSTAT)=AUTO)\n";
		$OUT .= "\texten => " . $row['pkey'] . ",n,Set(DEVICE_STATE(Custom:" . $row['pkey'] . ")=NOT_INUSE)\n";
		$OUT .= "\texten => " . $row['pkey'] . ",n,Playback(de-activated)\n";
		$OUT .= "\texten => " . $row['pkey'] . ",n,Hangup\n";	
		$OUT .= "\n";
		$OUT .= "\texten => *33*,1,GoTo(" . $row['pkey'] . ',' . $row['pkey'] . "open)\n";
		$OUT .= "\texten => *34*,1,GoTo(" . $row['pkey'] . ',' . $row['pkey'] . "close)\n"; 
		$OUT .= "\n";
//
//  pickup marks
//
/*
		if ($row['pkey'] == 'default') {
			$OUT .= "\n\texten => _*8XX.,1,Pickup(\${EXTEN:2}@PICKUPMARK)\n\n";
		}
		else {
*/
			$OUT .= "\n\texten => _*8XX.,1,Pickup(" .$row['id'] . "\${EXTEN:2}@PICKUPMARK)\n\n";
//		}
		


//Routes
//
		$sql = "SELECT * FROM Route WHERE cluster='" . $row['pkey'] . "' ORDER BY pkey";
		$qRes = $this->dbh->query($sql);
		$route = $qRes->fetchAll();
		$qRes = NULL;	
		foreach ($route as $routerow) {
			if ($routerow['active'] == "YES") {
				$routerow['dialplan'] = preg_replace ( '/\s+/'," ", $routerow['dialplan'] );
				$routerow['dialplan'] = preg_replace ( '/\s*$/',"", $routerow['dialplan'] );
				$dialplan = explode(" ", $routerow['dialplan']);
				foreach ($dialplan as $plan) {
					$OUT .= "\texten => " . $plan . ",1,agi(sarkhpe,OutRoute," . $routerow['pkey'] . ",,)\n";		
				}
			}
		}

		$sql = "SELECT * FROM lineIO WHERE cluster='" . $row['pkey'] . "' ORDER BY pkey";
		$qRes = $this->dbh->query($sql);
		$trunk = $qRes->fetchAll();
		$qRes = NULL;			
		foreach ($trunk as $linerow) {
			if ($linerow['active'] == "YES" && $linerow['match'] != "" ) {
				$OUT .= "\texten => _" . $linerow['match'] . "X.,1,agi(sarkhpe,OutTrunk," . $linerow['pkey'] . ",,)\n";    	
			}
		}

// Queues
		$sql = "SELECT * FROM Queue WHERE cluster='" . $row['pkey'] . "' ORDER BY directdial";
		$qRes = $this->dbh->query($sql);
		$queue = $qRes->fetchAll();
		$qRes = NULL;			
		foreach ($queue as $qrow) {
			$OUT .= "\texten => " . $qrow['pkey'] . ",1,Answer()\n";
			$outstring =  "\texten => " . $qrow['pkey'] . ",n,Queue(";
			$outstring .= $qrow['pkey'];
			$outstring .= ',';
			$outstring .= $qrow['options'];
			$outstring .= ',,,,';
			if ($qrow['devicerec'] != 'None') {
				$outstring .= 'sarkhpe';
			}
			$outstring .= ")\n";
			if ($qrow['greetnum'] != 'None') {
				$OUT .= "\texten => " . $qrow['pkey'] . ",n,Playback(" . $this->SOUNDIR . $row['pkey'] . "/usergreeting" . $qrow['greetnum'] . ")\n";
			}
			$OUT .= $outstring; 
			$OUT .= "\texten => " . substr($qrow['pkey'],2) . ",1,GoTo(" . $qrow['pkey'] . ",1)\n";
// ToDo outcome processing...

		} 

// IVRs
		$sql = "SELECT * FROM IVRmenu WHERE cluster='" . $row['pkey'] . "' ORDER BY id";
		$qRes = $this->dbh->query($sql);
		$ivr = $qRes->fetchAll();
		
		$qRes = NULL;
		$listenString=NULL;			
		foreach ($ivr as $irow) {
				$OUT .= "\texten => " . $irow['pkey'] . ",1,Answer()\n"; 
				$OUT .= "\texten => " . $irow['pkey'] . ",n,agi(sarkhpe,IVR," . $irow['pkey'] . ")\n";  
				$shortdial = substr($irow['pkey'],2);
				$OUT .= "\texten => " . substr($irow['pkey'],2) . ",1,GoTo(" . $irow['pkey'] . ",1)\n";  
		}
// Extensions
		$sql = "SELECT * FROM IPphone where cluster = '" . $row['pkey'] . "' ORDER BY pkey";
		$qRes = $this->dbh->query($sql);
		$phone = $qRes->fetchAll();
		$qRes = NULL;				
		foreach ($phone as $IPphone) {
			$shortdial = $this->helper->displayKey($IPphone['pkey']);
			$OUT .= "\texten => " . $shortdial . ",hint,SIP/" . $IPphone['pkey'] . "\n";
			$OUT .= "\texten => " . $IPphone['pkey'] . ",1,agi(sarkhpe,InCall,,,)\n";
			if ($row['pkey'] != "default") { 
				$OUT .= "\texten => " . $shortdial . ",1,GoTo(" . $IPphone['pkey'] . ",1)\n";
			}
			if ($IPphone['dvrvmail'] != "None") {
				if ($IPphone['dvrvmail'] == "") {
              		$IPphone['dvrvmail'] = $shortdial;
            	}
          		$OUT .=  "\texten => *" . $shortdial . ",1,Voicemail(" . $IPphone['dvrvmail'] . "@" . $row['pkey']  . ",su)\n";
         		$OUT .=  "\texten => vm" . $shortdial . ",hint,Custom:vm" . $IPphone['pkey'] . "\n";
          		$OUT .=  "\texten => vm" . $shortdial . ",1,VoicemailMain(" . $IPphone['pkey'] . ")\n";          		
			}
/*			
			if ($this->globals['CAMPONQONOFF'] == "ON") {
          		$OUT .=  "\texten => **" . $IPphone['pkey'] . ",1,Set(save_caller=\${BLINDTRANSFER:4:4})\n";
	  			$OUT .=  "\texten => **" . $IPphone['pkey'] . ",n,Queue(Q" . $IPphone['pkey'] . "," . $global['CAMPONQOPT'] . ")\n";
	  			$OUT .=  "\texten => **" . $IPphone['pkey'] . ",n,Goto(extensions,\${save_caller},1) \n";  
			}
*/		
		}
// Generate a ringall 
    	$dialstr = '';
    	$ringall = '';
    	$count = 1;

    	foreach ($phone as $exten) { 
    		if ($count > 30) {
    			break;
    		}    
			$ringall .= "SIP/" . $this->helper->displayKey($exten['pkey']) .'&';
			$count++;
    	} 
   	
//  strip trailing space and generate ringall
		$ringall = preg_replace ( '/&$/',"", $ringall ); 
		if ($ringall != '') {
			$OUT .= "\texten => RINGALL,1,agi(sarkhpe,Alias,$ringall,\${EXTEN},)\n"; 
		}

		$this->generateRingGroups($OUT,$row['pkey'],$row['id']);	
		$this->confBridge($OUT,$row['pkey']);
		
        $OUT .= "\texten => *50*,1,VoiceMailMain(\${CALLERID(num)}@" . $row['pkey'] . ")\t;Voicemail Retrieve\n"; 
		$OUT .= "\texten => _*61*XXXX,1,Playback(/usr/share/asterisk/sarksounds/" . $row['pkey'] . "/usergreeting\${EXTEN:4})\n";  
	}



//
//	Queues
//

	$OUT .= "[queues]\n";
	$sql = "SELECT * FROM IPphone ORDER BY pkey";
	$qRes = $this->dbh->query($sql);
	$Quephone = $qRes->fetchAll();
	$qRes = NULL;		
	foreach ($Quephone as $IPphone) {
		if ($IPphone['technology'] == "Analogue" ||
				$IPphone['technology'] == "IAX2"  ||
				$IPphone['technology'] == "SIP"   ) {
			$OUT .= "\texten => " . $IPphone['pkey'] . ",1,agi(sarkhpe,Dial," . $IPphone['pkey'] . ",queue,)\n";
	  	}
    }

//
//  Class Of Service
//
	if ($this->globals['COSSTART'] == "ON") {
		$orideopenarray = array();
		$orideclosedarray = array();
//
//      select the overrides first
//
        $sql = "SELECT * FROM COS ORDER BY pkey";
		$qRes = $this->dbh->query($sql);
		$cos = $qRes->fetchAll();
		$qRes = NULL;	

		foreach ($cos as $mycos) {
			if ($mycos['orideopen'] == 'YES') {
				$orideopenarray[$mycos['pkey']] =	"YES";
			}
			if ($mycos['orideclosed'] == 'YES') {
				$orideclosedarray[$mycos['pkey']] =	"YES";
			}			
		}
//
//		now do the process 
//							
		$sql = "SELECT * FROM IPphone ORDER BY pkey";
		$qRes = $this->dbh->query($sql);
		$cosphone = $qRes->fetchAll();
		$qRes = NULL;		
		foreach ($cosphone as $IPphone) {
			$myCluster = $IPphone['cluster'];
			if ($myCluster == 'default') {
				$myCluster = 'qrxvtmny';
			} 
			$OUT .= "[" . $myCluster . substr($IPphone['pkey'],2) . "opencos]\n";
//			$OUT .= "[" . $myCluster . $IPphone['pkey'] . "opencos]\n";
			
			$OUT .= "\tinclude => Emergency\n"; 
//			
//			print the overrides
//			 
			foreach ($orideopenarray as $key => $value) {
				$OUT .= "\tinclude => " . $key . "\n";
			} 	
	 
			$sql = 	"SELECT COS_pkey FROM IPphoneCOSopen where IPphone_pkey='" . $IPphone['pkey'] . "'";
			$qRes = $this->dbh->query($sql);
			$cosopen = $qRes->fetchAll();
			$qRes = NULL;				
			foreach ($cosopen as $coskeys) {
//
//          don't print if already overridden
// 
				if (! $orideopenarray [$coskeys['COS_pkey']]) {
					$OUT .= "\tinclude => " . $coskeys['COS_pkey'] . "\n";
				} 	
			}

			$OUT .= "\tinclude => ". $myCluster . substr($IPphone['pkey'],2) . "Cosend\n";
//			$OUT .= "\tinclude => ". $myCluster . $IPphone['pkey'] . "Cosend\n";			

			$OUT .= "[" . $myCluster . substr($IPphone['pkey'],2) . "closedcos]\n";
//			$OUT .= "[" . $myCluster . $IPphone['pkey'] . "closedcos]\n";
			
			$OUT .= "\tinclude => Emergency\n"; 
			
			foreach ($orideclosedarray as $key => $value) {
				$OUT .= "\tinclude => " . $key . "\n";
			}
			  
			$sql = 	"SELECT COS_pkey FROM IPphoneCOSclosed where IPphone_pkey='" . $IPphone['pkey'] . "'";
			$qRes = $this->dbh->query($sql);
			$cosclosed = $qRes->fetchAll();
			$qRes = NULL;			
			foreach ($cosclosed as $coskeys) {
//
//          don't print if already overridden
// 
				if (! $orideclosedarray [$coskeys['COS_pkey']]) {
					$OUT .= "\tinclude => " . $coskeys['COS_pkey'] . "\n";
				} 	
			}
			$OUT .= "\tinclude => " . $myCluster . substr($IPphone['pkey'],2) . "Cosend\n";
//			$OUT .= "\tinclude => " . $myCluster . $IPphone['pkey'] . "Cosend\n";
			
			$OUT .= '[' . $myCluster . substr($IPphone['pkey'],2) . "Cosend]\n";
//			$OUT .= '[' . $myCluster . $IPphone['pkey'] . "Cosend]\n";
			
			
			$OUT .= "\texten => _.,1,GoTo($myCluster,\${EXTEN},1))\n";
		}  
	}
			
//	$sql = "SELECT * FROM COS ORDER BY pkey";
	foreach ($cos as $COS) {
		$OUT .= "[" . $COS['pkey'] . "]\n";
		$COS['dialplan'] = preg_replace ( '/\s+/'," ", $COS['dialplan'] );
		$COS['dialplan'] = preg_replace ( '/\s*$/',"", $COS['dialplan'] );
		$dialplan = explode(" ", $COS['dialplan']);
		foreach ($dialplan as $plan) {
			$OUT .= "\texten => $plan,1,Playtones(congestion)\n";
    		$OUT .= "\texten => $plan,2,Hangup\n";
		}
	}
	$OUT .= "\n[Emergency]\n"; 		
	$this->globals['EMERGENCY'] = preg_replace ( '/\s+/'," ", $this->globals['EMERGENCY'] );
	$this->globals['EMERGENCY'] = preg_replace ( '/\s*$/',"", $this->globals['EMERGENCY'] );
	$dialplan = explode(" ", $this->globals['EMERGENCY']);
	foreach ($dialplan as $plan) {
			$OUT .= "\texten => $plan,1,agi(sarkhpe,OutCluster,\${EXTEN},,)\n";
	} 	 

//
//  begin mainmenu (inbound context) 
//	

	$OUT .= <<<HERE

[from-trunk]   ; FPBX Compatibility
	include => mainmenu
        
[from-pstn]    ; FPBX Compatibility 
	include => mainmenu
	exten => s,1,Set(chan=\${CUT(CHANNEL,/,2)})  
	exten => s,n,Set(chan=\${CUT(chan,-,1)})               
	exten => s,n,GoTo(mainmenu,DAHDI\${chan},1)


HERE;

$OUT .= "\n[mainmenu]\n";
//
//  include custom apps
//
	
	$sql = "select * from Appl";
	$qRes = $this->dbh->query($sql);
	$appl = $qRes->fetchAll();
	$qRes = NULL;
 	foreach ($appl as $row) {
		if ($row['span'] == "Both" || $row['span'] == "External") {
			$OUT .= "\tinclude => " . $row['pkey'] . "\n";    
		}
 	}

	$sql = "select * from lineIO WHERE carrier='DiD' OR carrier='CLID' order by pkey ";
	$qRes = $this->dbh->query($sql);
	$lineio = $qRes->fetchAll();
	$qRes = NULL;

 	foreach ($lineio as $row) {
		$OUT .= "\texten => " . $row['pkey'] . ",1,agi(sarkhpe,Inbound," . $row['pkey'] . "," . $row['cluster'] . ")\n";
	}

	$OUT .= <<<THERE

	exten => i,1,Playtones(congestion)
	exten => i,2,wait(5)
	exten => i,3,HangUp
	
[macro-clear]
        exten=>s,1,System(/bin/touch /opt/sark/var/spool/asterisk/monitor/\${filename})

[macro-pause]
        exten=>s,1,GoToIf($["\${CHANNEL}" = "\${channame}"]?:3)
        exten=>s,2,PauseMonitor
        exten=>s,3,NoOp(channel is \${CHANNEL} and channame is \${channame})

[macro-resume]
        exten=>s,1,GoToIf($["\${CHANNEL}" = "\${channame}"]?:3)
        exten=>s,2,UnPauseMonitor
        exten=>s,3,NoOp


[internal-presets]

THERE;
//
//  Internal presets
//

	$OUT .= "\n";
	
	$OUT .= <<<ANDTHERE
;
;	SARK Service Codes
;
;
        exten => _*12[*]XXXX,1,agi(sarkhpe,\${EXTEN},,)		; SYSOP Redir
        exten => _*12[*]XXX,1,agi(sarkhpe,\${EXTEN},,)		; SYSOP Redir
        exten => _*12[*],1,agi(sarkhpe,\${EXTEN},,)			; SYSOP OFF
        exten => _*1[89][*],1,agi(sarkhpe,\${EXTEN},,)		; DND ON/OFF
        exten => _*20[*],1,agi(sarkhpe,\${EXTEN},,)			; DND TOGGLE
        exten => _*2[12789][*]XX.,1,agi(sarkhpe,\${EXTEN},,)	; CF ONs
        exten => _*3[89][*]XX.,1,agi(sarkhpe,\${EXTEN},,)	; CFxxCL ON
        exten => _*3[89][*],1,agi(sarkhpe,\${EXTEN},,)		; CFxxCL OFF
        exten => _*2[123789][*],1,agi(sarkhpe,\${EXTEN},,)	; CF OFFs
        
        exten => _*26[*],1,agi(sarkhpe,\${EXTEN},,)			; RingDelay
        exten => _*26[*]X,1,agi(sarkhpe,\${EXTEN},,)		; RingDelay        
        exten => _*26[*]XX,1,agi(sarkhpe,\${EXTEN},,)		; RingDelay
        
        exten => _*3[012345][*],1,agi(sarkhpe,\${EXTEN},,)	; TIMERS
        exten => *51*,1,VoiceMailMain()  					; VMAIL
        exten => *52*,1,PlayBack(demo-echotest)        		; Echotest
        exten => *52*,n,Echo
        exten => *52*,n,PlayBack(demo-echodone)
        exten => *55*,1,SayUnixTime(,,HMpABd)          		; SayTime/Date
        exten => *56*,1,PlayBack(vm-extension)
        exten => *56*,n,SayDigits(\${CALLERID(num)})
        exten => _*60*XXXX,1,agi(sarkhpe,\${EXTEN},,)		; Greetings
        
        exten => _*6[34][*],1,agi(sarkhpe,\${EXTEN},,)		; Agent pause/unpause(63 64)
        exten => _*6[56][*],1,agi(sarkhpe,\${EXTEN},,)		; Agent Login/out(65 66)
        exten => _*67[*]XXXX,1,agi(sarkhpe,\${EXTEN},,)		; ChanSpy (Whisper)
        exten => _*67[*]XXX,1,agi(sarkhpe,\${EXTEN},,)		; ChanSpy (Whisper)        
        exten => _*68[*]XXXX,1,agi(sarkhpe,\${EXTEN},,)		; ChanSpy
        exten => _*68[*]XXX,1,agi(sarkhpe,\${EXTEN},,)		; ChanSpy
        exten => _*40[*],1,agi(sarkhpe,\${EXTEN},,)         ; Page
        exten => _*40[*]XXXX,1,agi(sarkhpe,\${EXTEN},,)     ; Page Group
        exten => _*40[*]XXX,1,agi(sarkhpe,\${EXTEN},,)		; Page Group
        exten => _*4[12][*],1,agi(sarkhpe,\${EXTEN},,)		; ProVu DND
;
;   RSSH support sessions - requires rssh licence keys to be installed
;
		exten=>_*44*XXX.,1,Authenticate(\${SYSPASS})
		exten=>_*44*XXX.,n,system(echo "PORT1=\${EXTEN:4}" > /opt/sark/service/rssh/serviceport1)
		exten=>_*44*XXX.,n,system(sudo /usr/bin/sv o srk-ua-rssh)
		exten=>_*44*XXX.,n,Playback(activated)
		exten=>*_44*XXX.,n,Hangup

		exten=>*44*,1,Authenticate(\${SYSPASS})
		exten=>*44*,n,system(sudo /usr/bin/sv d srk-ua-rssh)
		exten=>*44*,n,Playback(de-activated)
		exten=>*44*,n,Hangup

;
;	Wakeup call 
;
		exten => _*24[*],1,agi(kwakeup)
		exten => _*24[*]XXX,1,Authenticate(\${SYSPASS})
		exten => _*24[*]XXX,n,agi(kwakeup,EXT\${EXTEN:4})
		exten => _*24[*]XXXX,1,Authenticate(\${SYSPASS})
		exten => _*24[*]XXXX,n,agi(kwakeup,EXT\${EXTEN:4})
		exten => _***XXX,1,Set(CHANNEL(language)=\${LANGUAGE})
		exten => _***XXX,n,Dial(SIP/\${EXTEN:3},60)
		exten => _***XXXX,1,Set(CHANNEL(language)=\${LANGUAGE})
		exten => _***XXXX,n,Dial(SIP/\${EXTEN:3},60)

;
;	NANP Vertical Service Code Compatibility
;
       	exten => *60,1,GoTo(*55*,1)
       	exten => *65,1,GoTo(*56*,1)

       	exten => _*72X.,1,agi(sarkhpe,*21*\${EXTEN:3},,)
       	exten => *73,1,agi(sarkhpe,*21*,,)
       	exten => _*77XXXX,1,agi(sarkhpe,*60*\${EXTEN:3},,)
       	exten => *78,1,agi(sarkhpe,*18*,,)
       	exten => *79,1,agi(sarkhpe,*19*,,)

       	exten => _*90X.,1,agi(sarkhpe,*22*\${EXTEN:3},,)
       	exten => *91,1,agi(sarkhpe,*22*,,)
       	exten => *97,1,GoTo(*50*,1)
       	exten => *98,1,GoTo(*52*,1)
       	exten => _*99XXXX,1,agi(sarkhpe,*61*\${EXTEN:3},,)
       	exten => i,1,Playtones(congestion)


;
;#####################################################################
;
;	Customer Supplied Contexts below this line (if any).
;
;#####################################################################

ANDTHERE;

//
// Custom Apps
//	
	$OUT .= "\n"; 
//	$sql = "select * from Appl";
 	foreach ($appl as $row) {
		$OUT .= ";\n";
		$OUT .= ";\tCustomer Supplied Context " .  $row['pkey'] . "\n";
		$OUT .= ";\n";
    		$OUT .= "[" .  $row['pkey'] . "]\n";
    		$OUT .= $row['extcode'];
		$OUT .= ";\n";
	}

// write the generated file 

	$fh = fopen("/etc/asterisk/extensions.conf", 'w') or die('Could not open file extensions.conf!');
	fwrite($fh,$OUT) or die('Could not write to file extensions.conf');
	fclose($fh); 
// clean it
	`dos2unix /etc/asterisk/extensions.conf >/dev/null 2>&1`;
//
//	All done.	
//
}
catch(PDOException $e) {

//    	echo $e->getMessage();
    	$errorMsg = $e->getMessage();
    	syslog(LOG_WARNING, "DB error in extension generate - $errorMsg" );
}

}


private function confBridge(&$OUT,$cluster=null) {
	
/* 
 * 4.2 managed conferences
 */
	$profile = 'sark_user';
	if (isset ($cluster)) {
 		$sql = "SELECT * FROM meetme WHERE cluster='" . $cluster . "' ORDER BY pkey";
	}
	else {
		$sql = "SELECT * FROM meetme ORDER BY pkey";
	}

	$qRes = $this->dbh->query($sql);
	$meetme = $qRes->fetchAll();
	$qRes = NULL; 

	foreach ($meetme as $room) {
		$OUT .= "\texten => " . $room['pkey'] . ",1,NoOp(conference " . $room['pkey'] . ")\n";
		$OUT .= "\tsame => n,Answer(500)\n";
		if ($room['pin'] != 'None') {
			$OUT .= "\tsame => n,Authenticate(" . $room['pin'] . ")\n";
		}		 
		if ($room['type'] == "hosted" ) {			
			$profile = 'sark_hosted_user';
		}
		else {
			$profile = 'sark_user';
		}		
		$OUT .= "\tsame => n,ConfBridge(\${EXTEN},,$profile)\n";
		$OUT .= "\tsame => n,Hangup()\n";
		$OUT .= "\texten => " . substr($room['pkey'],2) . ",1,GoTo(" . $room['pkey'] . ",1)\n";
	}	   		 	
}

private function generateRingGroups(&$OUT,$cluster,$id) {
//  build pageall/ringall group 

	$speedflag = false;
	$sql = "select * from speed where cluster = '" . $cluster ."' ORDER BY pkey";
	$qRes = $this->dbh->query($sql);
	$speed = $qRes->fetchAll();
	$qRes = NULL;	
	$dialstr = "";
	$pagearray = array();
 	foreach ($speed as $row) { 
		$outlist = $this->synthAlias($row['pkey']);
		foreach ($outlist as $ep) {
			$phonekey = $id . $ep;
			if (strlen($phonekey) <= 6 ) {
				$sql = "select * from IPphone WHERE pkey = '" . $phonekey . "'"; 
				$qRes = $this->dbh->query($sql);
				$IPphone = $qRes->fetch();
				$qRes = NULL;				
				if ($IPphone['technology'] == "Custom") {
					continue;
				}
				else { 
// check if we found a technology - if not skip expansion of this endpoint
					if ($IPphone['technology']) {
						$dialstr .= $IPphone['technology'] . "/" . $phonekey . "&";
					}	
				}	
			}
			elseif (preg_match(' /\// ',$ep)) {
				$dialstr .= $ep . "&";
			}
			else {
				if (!empty($ep)) {
					$dialstr .= "Local/$ep@" . $row['cluster'] . "&";	
				} 		
			}
		}
		$dialstr = preg_replace ( '/&$/',"", $dialstr );
		$fullKey = $row['pkey'];
		$shortKey = substr($row['pkey'],2);
		if ($row['grouptype'] != "Page" && $row['pkey'] != 'RINGALL') {
// ring group forwarding logic				
			if (!empty($row['divert'])) {				
				$OUT .= "\texten => **" . substr($row['pkey'],2) . ",1,NoOp()\n";
				$OUT .= "\texten => **$shortKey,n,GoToIf(\$[\"\${DEVICE_STATE(Custom:$fullKey)}\" = \"BUSY\"]?free$fullKey:set$fullKey)\n";

				$OUT .= "\texten => **$shortKey,n(set$fullKey),NoOp()\n";
				$OUT .= "\texten => **$shortKey,n,Set(DEVICE_STATE(Custom:$fullKey)=BUSY)\n";
				$OUT .= "\texten => **$shortKey,n,Playback(activated)\n";
				$OUT .= "\texten => **$shortKey,n,Hangup()\n";

				$OUT .= "\texten => **$shortKey,n(free$fullKey),NoOp()\n";					
				$OUT .= "\texten => **$shortKey,n,Set(DEVICE_STATE(Custom:$fullKey)=NOT_INUSE)\n";
				$OUT .= "\texten => **$shortKey,n,Playback(de-activated)\n";
				$OUT .= "\texten => **$shortKey,n,Hangup()\n";

				$OUT .= "\texten => $fullKey,1,NoOp(Custom:$fullKey state is \${DEVICE_STATE(Custom:$fullKey) )\n";
				$OUT .= "\texten => $fullKey,n,GoToIf(\$[\"\${DEVICE_STATE(Custom:$fullKey)}\"=\"BUSY\"]?divert$fullKey:normal$fullKey)\n"; 
				$OUT .= "\texten => $fullKey,n(normal$fullKey),NoOp()\n";
				$OUT .= "\texten => $fullKey,n,agi(sarkhpe,Alias,$dialstr,\${EXTEN},)\n";
				$OUT .= "\texten => $fullKey,n,Hangup()\n";
				$OUT .= "\texten => $fullKey,n(divert$fullKey),NoOp()\n";
				$OUT .= "\texten => $fullKey,n,GoTo(" . $row['divert'] . ",1)\n";
				$OUT .= "\texten => $shortKey,hint,Custom:$fullKey\n";		
			}
			else {
				$OUT .= "\texten => $fullKey,1,agi(sarkhpe,Alias,$dialstr,\${EXTEN},)\n";
			}
			$OUT .= "\texten => $shortKey,1,GoTo($fullKey,1)\n";
		}
		else {
			// build array of page groups (key & dialstring)
				$dialstr = preg_replace ( '/\s/',"&", $dialstr );
				$pagearray [$row['pkey']] =	$dialstr; 			
		} 
		$dialstr = "";
	}
// insert page group dialstrings into their tables 
	
	foreach ($pagearray as $pkey=>$dialstr) {
		$sql = $this->dbh->prepare("UPDATE speed SET pagegroup = '". $dialstr . "' where pkey=?");
		$sql->execute(array($pkey));			
		$sql=NULL;
 	}

}	

private function synthAlias($alias)  {
//
//  Recursive function to build a callgroup.
//  input - db handle & callgroup number
//  output - unordered array of extension numbers or an empty array
//	
	$array=array();
    $sql = "select count(*) from speed WHERE pkey = '" . $alias . "'";
    $qRes = $this->dbh->query($sql);
	$count = $qRes->fetch();
	$qRes = NULL;

//	$res = $dbh->query($sql)->fetch(PDO::FETCH_ASSOC);
//	
	if ($count['count(*)'] != 0) {
		$sql = "select * from speed WHERE pkey = '" . $alias . "'";
		$qRes = $this->dbh->query($sql);
		$row = $qRes->fetch();
		$qRes = NULL;		
//		$row = $dbh->query($sql)->fetch(PDO::FETCH_ASSOC);
		$row['out'] = preg_replace ( '/\s+/'," ", $row['out'] );
		$row['out'] = preg_replace ( '/\s*$/',"", $row['out'] );
		$extension = explode(" ", $row['out']);
        	foreach ($extension as $ext) {
			$array = array_merge((array)$array, (array)$this->synthAlias($ext));
        	}
    	}
	else {
		array_push($array,$alias);
	}
    	return (isset($array) ? $array : false);
}
  
}
