<?php
// SARK LDAP Helper class
// Developed by CoCo
// Copyright (C) 2012 CoCoSoFt
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
require_once $_SERVER["DOCUMENT_ROOT"] . "../php/srkDbClass";
 
Class ldaphelper {
	
	protected $user;
	protected $password;
	protected $ldapserver = '127.0.0.1';
	protected $dbh;
	
	public $base;
	public $addressbook;	
	public $ds;
	
function __construct() {
	$this->dbh = DB::getInstance();
	$res = $this->dbh->query("SELECT LDAPBASE,LDAPOU,LDAPUSER,LDAPPASS FROM globals")->fetch(PDO::FETCH_ASSOC);
	$this->user = 'cn=' . $res['LDAPUSER'];
	$this->password = $res['LDAPPASS'];
	$this->addressbook = 'ou=' . $res['LDAPOU'];
	$this->base = $res['LDAPBASE']; 
}
 	
	
public function Connect() {
	$this->ds = ldap_connect($this->ldapserver)
		or die("Could not connect to ldap server: $this->ldapserver");
	ldap_set_option($this->ds, LDAP_OPT_PROTOCOL_VERSION, 3);
	$bind = ldap_bind($this->ds, $this->user . ',' . $this->base, $this->password);
	if (!$bind) {
		return 0;
	} 
	return 1;
}

public function Search($arg) {
	$sr = ldap_search($this->ds, $this->addressbook . "," . $this->base, "cn=*", $arg);
	return (ldap_get_entries($this->ds, $sr));	
}

public function Get($uid,$arg) {
	$sr = ldap_search($this->ds, $this->addressbook . "," . $this->base, $uid, $arg);
	return (ldap_get_entries($this->ds, $sr));	
}

public function Add($arg) {
	$sr = ldap_add($this->ds, "uid=" . uniqid("sark-id-") . ","  . $this->addressbook . "," . $this->base, $arg);
	if (!$sr) {
		if (ldap_errno($this->ds) == 0x44) { 
         return "Entry already exists!";
		} 
		else { 
			return "LDAP ERROR - " . ldap_error($this->ds); 
		}
    } 
    return "Saved new LDAP contact ";	
}

// Used by the factory reset function
public function Clean() {
	$sr=ldap_list($this->ds,$this->addressbook . "," . $this->base,"cn=*",array(""));
    $info = ldap_get_entries($this->ds, $sr);
    for($i=0;$i<$info['count'];$i++){
		$dn = $info[$i]['dn'];
        $result = ldap_delete($this->ds,$dn);
        if(!$result){
			//return result code, if delete fails
			return($result);
        }
    }
	return 1;
}

public function Close() {
	ldap_close($this->ds);
	return 1;
}


}

