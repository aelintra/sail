<?php
// SARK Network Helper class
// Developed by CoCo
// Copyright (C) Aelintra Telecom Limited 2018
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
 
Class nethelper {
	
	protected $interfaceName;
	protected $localIPV4;
	protected $networkCIDR;
	protected $networkBrd;
	protected $networkIPV4;
	

function __construct() {

// interface name
	$this->interfaceName = trim(`ls /sys/class/net | grep -v lo | head -n1`);

// localIPV4
	$iprets = shell_exec( "ip addr show dev " . $this->interfaceName);
	preg_match ( '/inet\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/\d{1,2}/', $iprets, $matches);
    $this->localIPV4 = $matches[1];
    
 // Broadcast IPV4
 	preg_match ( '/brd\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/', $iprets, $matches); 
	$this->networkBrd = $matches[1];
	   
// network address IPV4
	$iprets = shell_exec( "ip route | grep " . $this->interfaceName);
	preg_match ( '/(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/(\d{1,2})/', $iprets, $matches);
	$this->networkIPV4 = $matches[1];
	
// CIDR IPV4
	$this->networkCIDR = $matches[2];		
}
 	
/*
	getters
 */	

public function get_interfaceName() {
	return $this->interfaceName;
}

public function get_localIPV4() {
	return $this->localIPV4;
}

public function get_networkCIDR() {
	return $this->networkCIDR;
}

public function get_networkBrd() {
	return $this->networkBrd;
}

public function get_networkIPV4() {
	return $this->networkIPV4;
}

public function get_networkGw() {
	$iprets = shell_exec( "ip route | grep default | grep " . $this->interfaceName);
	preg_match ( '/via\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/', $iprets, $matches);
	$networkGw = $matches[1];
	return $networkGw;	
}

public function get_netMask() {
	$work = str_split(str_pad(str_pad('', $this->networkCIDR, '1'), 32, '0'), 8);
    foreach ($work as &$element) $element = bindec($element);
    $netMask = join('.', $work);
	return $netMask;
}

public function get_IPV6LLA() {
	$work = shell_exec( "ip addr show dev " . $this->interfaceName . " | grep 'inet6' | grep fe80 | tr -s ' ' | cut -d ' ' -f 3" ); 
    $work = preg_replace('/\/64$/','',$work); 
    if ($work) {
    	return trim($work);
    }  
	return -1;
}

public function get_IPV6ULA() {
	$work = shell_exec( "ip addr show dev " . $this->interfaceName . " | grep 'inet6' | grep fd84 | tr -s ' ' | cut -d ' ' -f 3" ); 
    $work = preg_replace('/\/64$/','',$work); 
    if ($work) {
    	return trim($work);
    }
	return -1;
}

public function get_IPV6GUA() {
	$work = shell_exec( "ip addr show dev " . $this->interfaceName . " | grep 'inet6' | grep -v fe80 | grep -v fd84 | tr -s ' ' | cut -d ' ' -f 3" );
    $work = preg_replace('/\/64$/','',$work); 
    if ($work) {
    	return trim($work);
    }   
	return -1;
}
//  This is going to be relatively slow
public function get_externip() {
    $work = `/usr/bin/wget -q  -O  - checkip.dyndns.org`;   
	if (preg_match(" /Current IP Address:*.([\d\.]+)/",$work,$matches)) { 
	 		return $matches[1]; 	 		
 	}
	return -1; 
}


}

